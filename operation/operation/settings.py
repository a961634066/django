# -*- coding:utf-8-*-
"""
Django settings for operation project.

Generated by 'django-admin startproject' using Django 1.11.16.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
from datetime import timedelta

import djcelery


djcelery.setup_loader()
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&=8q)1-#0^3@_pu%o))__6e!c&&8x2)zoe2)$85@vc0#xem0a0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'appss.pruduct',
    "djcelery",
    "rest_framework",
    "appss.aplay",
    "appss.include_test"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'operation.middlewear.request_middlewear.request_middlewear'
]

ROOT_URLCONF = 'operation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'operation.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# rest_framework配置
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}


# 缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100}
            # "PASSWORD": "密码",
        }
    },
    "d1": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100}
            # "PASSWORD": "密码",
        }
    }
}


REDIS_TIMEOUT=7*24*60*60
CUBES_REDIS_TIMEOUT=60*60
NEVER_REDIS_TIMEOUT=365*24*60*60


LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    # formatters：配置打印日志格式
    "formatters": {
        'standard': {
            'format': '%(asctime)s [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s] %(message)s'}
    },
    'filters': {
    },

    # handler：用来定义具体处理日志的方式，可以定义多种，"default"就是默认方式，"console"就是打印到控制台方式。
    "handlers": {
        "default": {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': "{}/log/default.log".format(BASE_DIR),  # 日志输出文件
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份份数
            'formatter': 'standard',  # 使用哪种formatters日志格式
        },
        "django_file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "{}/log/django.log".format(BASE_DIR),
            "maxBytes": 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
            'filters': []
        },
        "app": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "{}/log/apps.log".format(BASE_DIR),
            "maxBytes": 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
            'filters': []
        }
    },

    # loggers:用来配置用那种handlers来处理日志，比如你同时需要输出日志到文件、控制台
    "loggers": {
        "django.server": {
            "handlers": ["django_file"],
            'level': 'DEBUG',
            'propagate': True,
        },
        "pruduct": {
            "handlers": ["app", "default"],
            'level': 'DEBUG',
            'propagate': True,
        }
    }
}


# celery配置
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/3' # Broker配置，使用Redis作为消息中间件

CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/3' # BACKEND配置，这里使用redis

#使用django orm 作为结果存储

# pip install django-celery-results
# INSTALLED_APPS = (
#     ...,
#     'django_celery_results',
# )
# CELERY_RESULT_BACKEND = 'django-db'


CELERY_RESULT_SERIALIZER = 'json' # 结果序列化方案
CELERY_TIMEZONE='Asia/Shanghai'

CELERY_IMPORTS = (
    'appss.pruduct.tasks',
)

# CELERY_IMPORTS：是导入目标任务文件
#
# CELERYBEAT_SCHEDULER：使用了 django-celery 默认的数据库调度模型,任务执行周期都被存在默认指定的 orm 数据库中．
#
# CELERYBEAT_SCHEDULE：设置定时的时间配置， 可以精确到秒，分钟，小时，天，周等。

CELERYD_CONCURRENCY = 4   # 创建四个工人




CELERYBEAT_SCHEDULE = {    #定时器策略
    #定时任务一：　每隔30s运行一次
    # u'测试定时器1': {
    #     "task": "art.tasks.tsend_email",
    #     #"schedule": crontab(minute='*/2'),  # or 'schedule':   timedelta(seconds=3),
    #     "schedule":timedelta(seconds=30),
    #     "args": (),
    # },
}

PERIOD_TASKS = []
POLICIES_TASKS = ["appss.pruduct.tasks.add",
                  "appss.pruduct.tasks.just_print"]

CELERY_QUEUES = {
    "period_tasks": {
        "exchange": "period_tasks",
        "exchange_type": "direct",
        "routing_key": "period_tasks"
    },
    "delay": {
        "exchange": "delay",
        "exchange_type": "direct",
        "routing_key": "delay"
    },
    "default": {
        "exchange": "default",
        "exchange_type": "direct",
        "routing_key": "default"
    }
}

class MyRouter(object):
    def route_for_task(self, task, args=None, kwargs=None):
        if task in PERIOD_TASKS:
            return {"queue": "period_tasks"}
        elif task in POLICIES_TASKS:
            return {"queue": "delay"}
        else:
            return {"queue": "default"}

CELERY_ROUTES = (MyRouter(), )


# 邮箱配置
# EMAIL_HOST = "smtp.qq.com"    # 如果是 163 改成 smtp.163.com
# EMAIL_PORT = 465     # ssl，端口号,  非 25
# EMAIL_HOST_USER = "961634066@qq.com"        # 发送者的邮箱
# EMAIL_HOST_PASSWORD = '***'                 #发送者的邮箱授权
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# EMAIL_USE_SSL = True   #使用ssl
# EMAIL_USE_TLS = False   #安全传输协议
# EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"